In Python, strings have the property of immutability which means they cannot be mutated or changed. You can assign strings to variables, and reassign new strings to the same variable, but individual characters within a string cannot be reassigned.

lower():
Converts all uppercase characters in a string to lowercase.
Example: string = "HELLO".lower()
upper():
Converts all lowercase characters in a string to uppercase.
Example: string = "hello".upper()
strip():
Removes leading and trailing whitespace from a string.
Example: string = " hello ".strip()
split():
Splits a string into a list of substrings based on a specified delimiter. 
Example: string = "apple,banana,cherry".split(",")
replace():
Replaces all occurrences of a specified substring with another substring. 
Example: string = "hello world".replace("hello", "goodbye")

 F-strings offer significant advantages over older formatting techniques like str.format() and % formatting in Python. They are generally faster, more readable, and provide greater flexibility for inserting variables and expressions directly into strings. Two key benefits of using f-strings are improved code readability and enhanced performance. 